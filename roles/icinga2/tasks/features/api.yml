---

- name: set api feature facts
  set_fact: 
    icinga2_cert_name: "{{ icinga2_dict_features.api.cert_name |default(ansible_fqdn) }}"
    icinga2_ca_host: "{{ icinga2_dict_features.api.ca_host |mandatory }}"
    icinga2_force_newcert: "{{ icinga2_dict_features.api.force_newcert |default(False) }}"
    icinga2_endpoints: "{{ icinga2_dict_features.api.endpoints |default([]) }}"
    icinga2_zones: "{{ icinga2_dict_features.api.zones |default([]) }}"

- name: api feature cleanup arguments list 
  set_fact:
    args: "{{ args|default({}) | combine({idx.key: idx.value}) }}"
  when: idx.key not in ['ca_host', 'cert_name', 'force_newcert', 'zones', 'endpoints']
  loop: "{{ icinga2_dict_features.api |dict2items }}"
  loop_control:
    loop_var: idx

- name: feature api ApiListener object
  icinga2_object:
    name: api
    type: ApiListener
    file: features-available/api.conf
    args: "{{ args }}"
  register: result

- set_fact:
    icinga2_local_objects: "{{ icinga2_local_objects|default([]) + [result.dest] }}"

- name: feature api Endpoint objects
  icinga2_object:
    type: Endpoint
    args: "{{ idx }}"
  loop: "{{ icinga2_endpoints }}"
  loop_control:
    loop_var: idx
  register: result

- set_fact:
    icinga2_local_objects: "{{ icinga2_local_objects|default([]) + [idx.dest] }}"
  loop: "{{ result.results }}"
  loop_control:
    loop_var: idx

- name: feature api Zone objects
  icinga2_object:
    type: Zone
    args: "{{ idx }}"
  loop: "{{ icinga2_zones }}"
  loop_control:
    loop_var: idx
  register: result

- set_fact:
    icinga2_local_objects: "{{ icinga2_local_objects|default([]) + [idx.dest] }}"
  loop: "{{ result.results }}"
  loop_control:
    loop_var: idx

- name: create new CA
  block:
    - name: check ca key already exits
      stat:
        path: "{{ icinga2_ca_path }}/ca.key"
      register: icinga2_ca_key_path
    
    - name: check ca cert already exits
      stat:
        path: "{{ icinga2_ca_path }}/ca.crt"
      register: icinga2_ca_cert_path
    
    - name: create CA
      shell: >
        icinga2 pki new-ca
      when: icinga2_ca_cert_path.stat.exists == false and icinga2_ca_key_path.stat.exists == false
  when: icinga2_ca_host == 'none'

- name: check cert key already exits
  stat:
    path: "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
  register: icinga2_ssl_key_path

- name: check certificate already exits
  stat:
    path: "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt"
  register: icinga2_ssl_cert_path

- name: certificate request
  block:
    - name: create cert path
      file:
        path: "{{ icinga2_cert_path }}"
        state: directory
        owner: "{{ icinga2_user }}"
        group: "{{ icinga2_group }}"
        mode: "0750"

    - name: save trusted-master.crt
      shell: >-
        icinga2 pki save-cert
        --host "{{ icinga2_ca_host }}"
        --trustedcert "{{ icinga2_cert_path }}/trusted-master.crt"
      when: icinga2_ca_host != 'none'

    - name: generate private and public key
      shell: >-
        icinga2 pki new-cert
        --cn "{{ icinga2_cert_name }}"
        --key "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
        {% if icinga2_ca_host != 'none' %} --cert "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt" {% else %} --csr "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.csr" {%- endif %}

    - name: ticket request
      shell: icinga2 pki ticket --cn "{{ icinga2_cert_name }}"
      delegate_to: "{{ icinga2_ca_host }}"
      register: icinga2_ticket
      when: icinga2_ca_host != 'none'

    - name: get certificate
      shell: >-
        icinga2 pki {% if icinga2_ca_host != 'none' %} request
        --ticket "{{ icinga2_ticket.stdout }}"
        --host "{{ icinga2_ca_host }}"
        --ca "{{ icinga2_cert_path }}/ca.crt"
        --key "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.key"
        --trustedcert "{{ icinga2_cert_path }}/trusted-master.crt"
        {% else %} sign-csr --csr "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.csr" {%- endif %}
        --cert "{{ icinga2_cert_path }}/{{ icinga2_cert_name }}.crt"
      notify: reload icinga2 service

    - name: copy CA root certificate
      copy:
        src: "{{ icinga2_ca_path }}/ca.crt"
        dest: "{{ icinga2_cert_path }}/ca.crt"
        remote_src: yes
      when: icinga2_ca_host == 'none'
  when: (icinga2_ssl_cert_path.stat.exists == false or icinga2_ssl_key_path.stat.exists == false or icinga2_force_newcert)

- set_fact:
    args: None
